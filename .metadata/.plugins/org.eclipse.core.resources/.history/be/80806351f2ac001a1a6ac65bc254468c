import java.io.*;
import java.util.*;
public class checkers {

	public static void main(String[] args) throws IOException{
		// IO
		//                                    new FileReader("cownomics.in")
		BufferedReader f = new BufferedReader(new InputStreamReader(System.in));
		//                               new BufferedWriter(new FileWriter("cownomics.out"))
		PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out));
		List<Pos> knights = new ArrayList<Pos>();
		int N = Integer.parseInt(f.readLine());
		StringTokenizer st;
		int[][] map = new int[N][N];
		for(int i = 0; i < N; i ++) {
			st = new StringTokenizer(f.readLine());
			for(int j = 0; j < N; j ++) {
				char type = st.nextToken().charAt(0);
				if(type == '-') {
					map[i][j] = -1;
				}else if(type == '+') {
					map[i][j] = 0;
				}else if(type == 'K') {
					knights.add(new Pos(i,j));
					map[i][j] = 2;
				}else if(type == 'o') {
					map[i][j] = 1;
				}
			}
		}
		int[][] dir = {{0,1}, {1,1},{1,0}, {1,-1},{0,-1},{-1,-1}, {-1, 0}, {-1, 1}};
		List<List<Pos>> killingmethods = new ArrayList<>(knights.size());
		for(int i = 0; i < killingmethods.size(); i ++) {
			killingmethods.add(new ArrayList<Pos>());
			Pos knightPos = knights.get(i);
			for(int j = 0; j < dir.length; j ++) {
				if(0 < (knightPos.x + dir[i][0]*2)< N && 0 < (knightPos.y + dir[i][1]*2)< N ) {
					
				}
			}
		}
	}

}
class Pos{
	int x,y;
	public Pos(int x, int y) {
		this.x =x ;
		this.y =y ;
	}
	public String toString() {
		return "("+this.x+","+this.y+")";
	}
}
